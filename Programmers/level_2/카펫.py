def solution(brown, yellow):
    answer = []
    # 약수를 구하고
    # 약수에 맞게 yellow의 가로 세로를 구한다음
    # 브라운이 덮어지는 개수를 구하면 됨.
    # 면적을 합치면됨?
    
    # 노란색의 가로*세로에 대한 값들을 저장
    # 노란색의 (가로+2) * (세로+2) - 노란색의 면적 = 브라운이 되는지 확인
    
    yellows = []
    for i in range(1, yellow+1):
        if yellow%i == 0:
            yellows.append([int(yellow/i), i])
    
    for i in yellows:
        if (i[0]+2) * (i[1]+2) - yellow == brown:
            answer = [(i[0]+2),(i[1]+2)]
            break
    return answer

# - - - 
# - ; -
# - - -

# - - - - - - - - 
# - ; ; ; ; ; ; - 
# - ; ; ; ; ; ; - 
# - ; ; ; ; ; ; - 
# - ; ; ; ; ; ; - 
# - - - - - - - - 
# 24 -> 
# 노란색의 (가로+2) * (세로+2)
# 만약 노란색의 가로세로가 최소 약수가 아니라면?

# 노란색의 가로*세로에 대한 값들을 저장
# 노란색의 (가로+2) * (세로+2) - 노란색의 면적 = 브라운이 되는지 확인


# 정해진 노란색 타일의 형태에 대해 
# 브라운이 어떻게 감싸지는지를 파악해야함.
# 노란색에 대해 브라운이 무조건 한줄로 감싸짐.
